name: Deploy a branch

on:
  workflow_dispatch:
    inputs:
      deploy-to-staging:
        description: "Deploy to staging"
        default: true
        type: boolean

      promote-to-release:
        description: "Promote staging -> release"
        default: true
        type: boolean

      version:
        description: "Explicit version (optional)"
        default: ""
        type: string

jobs:
  maven-central:
    name: Deploy to Maven Central
    environment: maven-central
    runs-on: ubuntu-22.04

    permissions:
      contents: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3.5.0
        with:
          fetch-depth: 2

      - name: Initialize Java environment
        uses: actions/setup-java@v3.11.0
        with:
          distribution: zulu
          # Must use >= JDK 17 for Javadocs to generate correctly.
          java-version: 17
          server-id: ossrh
          server-username: OSSRH_USERNAME
          server-password: OSSRH_TOKEN
          gpg-passphrase: GPG_PASSPHRASE
          gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}

      - name: Configure Git
        shell: bash
        run: |-
          source ./scripts/common.sh
          run <<SCRIPT
            git config user.name '${{ github.actor }}'
            git config user.email '${{ github.actor }}@users.noreply.github.com'
          SCRIPT

      - name: Determine groupId
        shell: bash
        run: |-
          group_id="$(./mvnw help:evaluate -q -DforceStdout -Dexpression="project.groupId")"
          echo "group_id=${group_id}" >> "${GITHUB_ENV}"
          
      - name: Determine artifactId
        shell: bash
        run: |-
          artifact_id="$(./mvnw help:evaluate -q -DforceStdout -Dexpression="project.artifactId")"
          echo "artifact_id=${artifact_id}" >> "${GITHUB_ENV}"
          
      - name: Determine final release version number
        shell: bash
        run: |-
          if [[ '${{ inputs.version }}' == "" ]]; then
            release_version="$(./mvnw -B help:evaluate -Dexpression=project.version -q -DforceStdout | sed 's/-SNAPSHOT//g')"
          else
            release_version='${{ inputs.version }}'
          fi
          echo "release_version=${release_version}" >> "${GITHUB_ENV}"

      - name: Perform release to Staging
        id: maven-central-staging
        if: inputs.deploy-to-staging
        shell: bash
        run: |-
          source ./scripts/common.sh
          
          info "Will release ${group_id}/${artifact_id}/${release_version} to Nexus staging"
          
          ensure-set OSSRH_USERNAME OSSRH_TOKEN GPG_PASSPHRASE
          info "Preparing and performing the release"
         
          build_args=(
            "-Dmaven.test.skip" 
            "-DskipTests"
            "-Dlicense.skip=true"
            "-Dcheckstyle.skip=true"
            "-Preleases"
          )

          run <<-SCRIPT          
            ./mvnw -B -e \
                -Preleases \
                -Darguments='${build_args[@]}' \
                -DdryRun='false' \
                -Dpassword='${{ secrets.GITHUB_TOKEN }}' \
                -DreleaseVersion='${release_version}' \
                -DsignTag=false \
                -Dtag='v${release_version}' \
                release:prepare release:perform
          SCRIPT
            
          success "Release has been promoted to Nexus Staging successfully"
        env:
          OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          OSSRH_TOKEN: ${{ secrets.OSSRH_TOKEN }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}

      - name: Promote Nexus staging to releases repo
        id: maven-central-releases
        if: inputs.promote-to-release && !inputs.dry-run
        shell: bash
        run: |-
          source ./scripts/common.sh
          
          ensure-set OSSRH_USERNAME OSSRH_TOKEN GPG_PASSPHRASE
          info "Will now promote ${group_id}/${artifact_id}/${release_version} to Maven Central"
            
          run <<-SCRIPT
            ./scripts/close-nexus-repository.sh \
                -u "${OSSRH_USERNAME}" \
                -p "${OSSRH_TOKEN}" \
                -g "${group_id}" \
                -a "${artifact_id}" \
                -v "${release_version}" \
                -s "https://s01.oss.sonatype.org/" 
          SCRIPT
            
          success "Released ${group_id}/${artifact_id}/${release_version} to Maven Central successfully"
        env:
          OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          OSSRH_TOKEN: ${{ secrets.OSSRH_TOKEN }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
