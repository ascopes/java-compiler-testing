name: Deploy a branch

on:
  workflow_dispatch:
    inputs:
      dry-run:
        description: "Dry run the deployment"
        default: true
        type: boolean

      version:
        description: "Version (leave blank to release non-SNAPSHOT patch)"
        default: ""
        type: string

jobs:
  maven-central:
    name: Build and deploy code
    runs-on: ubuntu-22.04

    # No concurrency groups, as we do not want to risk cancelling this job midway through a
    # run and producing a tag without pushing to Maven Central at the same time.

    permissions:
      contents: write
      id-token: write
      pages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3.3.0
        with:
          fetch-depth: 2

      - name: Initialize Java environment
        uses: actions/setup-java@v3.10.0
        with:
          distribution: zulu
          # Must use >= JDK 17 for Javadocs to generate correctly.
          java-version: 17
          server-id: ossrh
          server-username: OSSRH_USERNAME
          server-password: OSSRH_TOKEN
          gpg-passphrase: GPG_PASSPHRASE
          gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}

      - name: Configure Git
        shell: bash
        run: |-
          source ./scripts/common.sh
          
          info "Applying Git user configuration"
          run <<SCRIPT
            git config user.name '${{ github.actor }}'
            git config user.email '${{ github.actor }}@users.noreply.github.com'
          SCRIPT

      - name: Perform release to Maven Central
        shell: bash
        run: |-
          source ./scripts/common.sh
          
          info "Determining group ID..."
          group_id="$(./mvnw help:evaluate -q -DforceStdout -Dexpression="project.groupId")"
          
          info "Determining (root) artifact ID..."
          artifact_id="$(./mvnw help:evaluate -q -DforceStdout -Dexpression="project.groupId")"
          
          info "Determining release version to use..."
          if [[ '${{ inputs.version }}' == "" ]]; then
            release_version="$(./mvnw -B help:evaluate -Dexpression=project.version -q -DforceStdout | sed 's/-SNAPSHOT//g')"
          else
            release_version='${{ inputs.version }}'
          fi
          
          info "Will release ${group_id}/${artifact_id}/${release_version} to Nexus staging"
          
          info "Preparing and performing the release"
          ensure-set OSSRH_USERNAME OSSRH_TOKEN GPG_PASSPHRASE
          
          build_args=(
            "-Dmaven.test.skip" 
            "-DskipTests"
            "-Dlicense.skip=true"
            "-Dcheckstyle.skip=true"
            "-Preleases"
          )
          
          run <<-SCRIPT          
            ./mvnw -B -e \
                -Preleases \
                -Darguments='${build_args[@]}' \
                -DdryRun='${{ inputs.dry-run }}' \
                -Dpassword='${{ secrets.GITHUB_TOKEN }}' \
                -DreleaseVersion='${release_version}' \
                -DsignTag=false \
                -Dtag='v${release_version}' \
                release:prepare release:perform
          SCRIPT
          
          success "Release has been promoted to Nexus Staging successfully"
          
          info "Will now promote ${group_id}/${artifact_id}/${release_version} to Maven Central"
          
          run <<<-SCRIPT
            ./scripts/close-nexus-repository.sh \
                -u "${OSSRH_USERNAME} \
                -p "${OSSRH_PASSWORD} \
                -g "${group_id}" \
                -a "${artifact_id} \
                -v "${release_version} \
                -s "https://s01.oss.sonatype.org/" 
          SCRIPT
          
          success "Released ${group_id}/${artifact_id}/${release_version} to Maven Central successfully"
        env:
          OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          OSSRH_TOKEN: ${{ secrets.OSSRH_TOKEN }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
