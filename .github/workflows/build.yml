name: Build
on:
  pull_request:
    branches:
      - '**'
    types: 
      - opened
      - synchronize
  push:
    branches:
      - 'main'
  workflow_call: {}
  workflow_dispatch: {}

jobs:
  formatting:
    name: Formatting
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: Initialize Java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 17
          cache: 'maven'

      - name: Run checks
        shell: bash
        run: >-
          ./mvnw 
          -B
          -e
          -T4
          -U
          --no-transfer-progress
          -DskipTests=true
          -Dstyle.color=always
          -Dmaven.main.skip
          -Dmaven.jar.skip
          -Dmaven.resources.skip
          -Dmaven.test.skip
          -Dmaven.wagon.httpconnectionManager.ttlSeconds=120
          verify

  dependency-check:
    name: Dependency Check
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: Initialize Java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 17
          cache: 'maven'

      - name: Run checks
        shell: bash
        run: >-
          ./mvnw 
          -B
          -T4
          -U
          -Pdependency-check
          --no-transfer-progress
          -DskipTests=true
          -Dstyle.color=always
          -Dcheckstyle.skip=true
          -Dlicense.skip=true
          -Dmaven.main.skip
          -Dmaven.jar.skip
          -Dmaven.resources.skip
          -Dmaven.test.skip
          -Dmaven.wagon.httpconnectionManager.ttlSeconds=120
          verify

      - name: Archive Dependency Scan reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: dependency-scan-report
          path: '**/target/dependency-check-report.html'
          retention-days: 30

  javadocs:
    name: JavaDocs
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: Initialize Java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          # Must use >= JDK 17 for JavaDocs to generate correctly.
          java-version: 17
          cache: 'maven'

      - name: Generate JavaDocs
        shell: bash
        run: >-
          ./mvnw 
          -B
          -e
          -T4
          -U
          -pl java-compiler-testing
          --also-make
          --no-transfer-progress
          -Dmaven.test.skip=true
          -Dcheckstyle.skip=true
          -Dlicense.skip=true
          -Dstyle.color=always
          -Dmaven.wagon.httpconnectionManager.ttlSeconds=120
          clean compile javadoc:jar

      - name: Upload JavaDocs as a build artifact
        uses: actions/upload-pages-artifact@v1
        with:
          path: java-compiler-testing/target/apidocs

  build:
    strategy:
      fail-fast: false
      matrix:
        os-name:
          - ubuntu-22.04
        java-version:
          - 11
          - 12
          - 13
          - 14
          - 15
          - 16
          - 17
          - 18
          - 19
          # Mockito currently does not support this distribution.
          # - 20-ea
        include:
          - os-name: macos-12
            java-version: 11
          - os-name: windows-2022
            java-version: 11
          - os-name: macos-12
            java-version: 19
          - os-name: windows-2022
            java-version: 19
          
    name: Build - JDK ${{ matrix.java-version }} - ${{ matrix.os-name }}
    runs-on: ${{ matrix.os-name }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: Initialize JDK
        uses: actions/setup-java@v3
        with:
          cache: maven
          check-latest: true
          distribution: zulu
          java-version: ${{ matrix.java-version }}

      - name: Compile and run tests
        shell: bash
        run: >-
          ./mvnw 
          -B 
          -e
          -T4
          -U
          --no-transfer-progress
          -Dcheckstyle.skip=true
          -Dlicense.skip=true
          -Dstyle.color=always
          -Dmaven.wagon.httpconnectionManager.ttlSeconds=120
          clean verify

      - name: Annotate test reports with build environment info
        if: always()
        shell: bash
        run: >-
          scripts/prepare-test-outputs-for-merge.sh
          -j "${{ matrix.java-version }}"
          -o "${{ matrix.os-name }}"

      # Compress first so that the collection job later takes far less time (order of a few minutes
      # or so). GitHub does not compress these until after the workflow finishes, meaning when
      # we unstash them to produce the coverage reports, it will make an HTTP call for every single
      # file. This can take several minutes and is somewhat painful to have to wait for.
      - name: Compress test and coverage reports into tarball
        shell: bash
        run: >-
          tar czf reports-${{ matrix.java-version }}-${{ matrix.os-name }}.tgz
          **/target/failsafe-reports/
          **/target/surefire-reports/
          **/target/site/jacoco/unit/jacoco*.xml
          **/target/site/jacoco/int/jacoco*.xml

      - name: Stash reports tarball
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: reports-java-${{ matrix.java-version }}-${{ matrix.os-name }}
          if-no-files-found: error
          path: reports-java-${{ matrix.java-version }}-${{ matrix.os-name }}.tgz
          retention-days: 30

  mutation-tests:
    name: Mutation tests
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: Initialize Java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 17
          cache: 'maven'

      - name: Run mutation tests
        shell: bash
        # Do not run on multiple threads, the plugin does not support this properly.
        run: >-
          ./mvnw 
          -B
          -e
          -U
          --also-make
          -pl java-compiler-testing
          --no-transfer-progress
          -P mutation
          -Dstyle.color=always
          -Dcheckstyle.skip=true
          -Dlicense.skip=true
          -Dmaven.wagon.httpconnectionManager.ttlSeconds=120
          test

      # Compress first so that the collection job later takes far less time (order of a few minutes
      # or so). GitHub does not compress these until after the workflow finishes, meaning when
      # we unstash them to produce the coverage reports, it will make an HTTP call for every single
      # file. This can take several minutes and is somewhat painful to have to wait for.
      - name: Compress mutation test reports into tarball
        shell: bash
        run: >-
          tar czf reports-mutation-tests.tgz
          **/target/surefire-reports/
          **/target/pit-reports/pit-reports/**

      - name: Stash reports tarball
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: reports-mutation
          if-no-files-found: error
          path: reports-mutation-tests.tgz
          retention-days: 30

  publish-test-reports:
    name: Publish test reports
    runs-on: ubuntu-22.04
    if: always()
    needs:
      - build
      - mutation-tests

    permissions:
      checks: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          # Needed to keep actions working correctly.
          fetch-depth: 2

      - name: Download stashed tarballs
        uses: actions/download-artifact@v3
        with:
          path: 'artifacts/reports-*.tgz'

      - name: Decompress stashed report tarballs
        shell: bash
        run: find artifacts/ -name "reports-*.tgz" -exec tar xzv {} \;

      - name: Publish test results
        continue-on-error: true
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          action_fail: false
          check_run_annotations: "skipped tests"
          deduplicate_classes_by_file_name: true
          json_test_case_results: true
          json_thousands_separator: ","
          junit_files: "artifacts/**/TEST-*.xml"
          report_individual_runs: false
          test_changes_limit: 500
          time_unit: "milliseconds"

      - name: Validate codecov.yml
        continue-on-error: false
        if: always()
        shell: bash
        run: curl --data-binary --fail @codecov.yml https://codecov.io/validate

      - name: Publish to codecov
        continue-on-error: true
        if: always()
        shell: bash
        run: |-
          curl --fail https://keybase.io/codecovsecurity/pgp_keys.asc | gpg --no-default-keyring \
              --keyring trustedkeys.gpg --import
          curl --fail -Os https://uploader.codecov.io/latest/linux/codecov
          curl --fail -Os https://uploader.codecov.io/latest/linux/codecov.SHA256SUM
          curl --fail -Os https://uploader.codecov.io/latest/linux/codecov.SHA256SUM.sig
          gpgv codecov.SHA256SUM.sig codecov.SHA256SUM
          shasum -a 256 -c codecov.SHA256SUM
          chmod -v +x codecov
          ./codecov
          # TODO: upload unit test and integration test reports separately so that
          # codecov processes it correctly. Need to hardwire the paths in here somehow.
          #./codecov -c -F unit -v
          #./codecov -c -F integration -v

  publish-javadocs:
    name: Publish latest JavaDocs to GitHub pages
    if: ${{ github.ref-name == 'main' && github.event_name != 'pull_request' }}
    permissions:
      pages: write
      id-token: write
    runs-on: ubuntu-22.04
    needs:
      - javadocs
    steps:
      - name: Deploy JavaDocs build artifact to GitHub Pages
        id: javadocs
        uses: actions/deploy-pages@v1
